/*
	Console factory

	# "automate-update-supplier-status-based-on-certificate-status"
*/

var mydigitalstructure = require('mydigitalstructure')
var _ = require('lodash')

module.exports =
{
	VERSION: '0.0.1',

	init: function (param)
	{
		mydigitalstructure.add(
		{
			name: 'blockchain-blockfrost-query',
			code: async function ()
			{
				let { BlockFrostAPI } = await import('@blockfrost/blockfrost-js')

				var event = mydigitalstructure.get({scope: '_event'});
				var settings = mydigitalstructure.get({scope: '_settings'});

				if (event.blockfrostProjectId == undefined)
				{
					event.blockfrostProjectId = settings.blockchain.blockfrost.projectId
				}

				if (event.address == undefined)
				{
					event.address = _.first(event.addresses)
				}

				const API = new BlockFrostAPI(
				{
					projectId: event.blockfrostProjectId // see: https://blockfrost.io
				});

				try
				{
					var queryOptions = {}
					if (event.query != undefined) {queryOptions = event.query};

					var queryResponse = {};

					if (queryOptions.address)
					{
						queryResponse.address = await API.addresses(event.address);
					}

					if (queryOptions.networkInfo)
					{
						queryResponse.networkInfo = await API.network();
					}

					if (queryOptions.latestBlock)
					{
						queryResponse.latestBlock = await API.blocksLatest();
					}

					if (queryOptions.latestEpoch)
					{
						queryResponse.latestEpoch = await API.epochsLatest();
					}

					if (queryOptions.health)
					{
						queryResponse.health = await API.health();
					}

					if (queryOptions.pools)
					{
						queryResponse.pools = await API.pools({ page: 1, count: 10, order: 'asc' });
					}
					
					//mydigitalstructure._util.message(queryResponse);

					mydigitalstructure.invoke(event.processComplete, queryResponse);
				}
				catch (error)
				{
					mydigitalstructure._util.message(error);
				}
			}
		});		
	}
}